{"version":3,"file":"SerialWorker.js","mappings":"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","sources":["webpack://js/./src/Biquad.ts","webpack://js/./src/Equaliser.ts","webpack://js/./src/Mapping.ts","webpack://js/./src/SerialWorker.ts","webpack://js/./src/SignalFactory.ts"],"sourcesContent":["export class Biquad {\n\n\tprivate xz1: number = 0;\n\tprivate xz2: number = 0;\n\n\tprivate yz1: number = 0;\n\tprivate yz2: number = 0;\n\n\tconstructor (\n\t\tpublic readonly a1: number = 0,\n\t\tpublic readonly a2: number = 0,\n\t\tpublic readonly b0: number = 0,\n\t\tpublic readonly b1: number = 0,\n\t\tpublic readonly b2: number = 0\n\t) {\n\t}\n\n\tpublic static create_bandpass(freq: number, gain: number, q: number, rate: number): Biquad {\n\t\tconst A = Math.pow(10, gain / 40);\n\t\tconst w = 2 * Math.PI * freq / rate;\n\t\tconst sn = Math.sin(w);\n\t\tconst cs = Math.cos(w);\n\t\tconst a = sn / (2 * q);\n\t\tconst a0 = 1 + a / A;\n\t\tconst a1 = -2 * cs;\n\t\tconst a2 = 1 - a / A;\n\t\tconst b0 = 1 + a * A;\n\t\tconst b1 = -2 * cs;\n\t\tconst b2 = 1 - a * A;\n\t\treturn new Biquad(a1 / a0, a2 / a0, b0 / a0, b1 / a0, b2 / a0);\n\t}\n\n\tpublic reset() {\n\t\tthis.xz1 = 0;\n\t\tthis.xz2 = 0;\n\t\tthis.yz1 = 0;\n\t\tthis.yz2 = 0;\n\t}\n\n\tpublic apply(signal: Float32Array) {\n\t\tconst a1 = this.a1;\n\t\tconst a2 = this.a2;\n\t\tconst b0 = this.b0;\n\t\tconst b1 = this.b1;\n\t\tconst b2 = this.b2;\n\t\tlet xz1 = this.xz1;\n\t\tlet xz2 = this.xz1;\n\t\tlet yz1 = this.yz1;\n\t\tlet yz2 = this.yz2;\n\t\tconst N = signal.length;\n\t\tconst ys = new Float32Array(N);\n\t\tfor (let i = 0; i < N; ++i) {\n\t\t\tconst x = signal[i];\n\t\t\tconst y = x * b0 + xz1 * b1 + xz2 * b2 - yz1 * a1 - yz2 * a2\n\t\t\tsignal[i] = y;\n\t\t\txz2 = xz1;\n\t\t\txz1 = x;\n\t\t\tyz2 = yz1;\n\t\t\tyz1 = y;\n\t\t}\n\t\tthis.xz1 = xz1;\n\t\tthis.xz2 = xz1;\n\t\tthis.yz1 = yz1;\n\t\tthis.yz2 = yz2;\n\t}\n\n}\n","import { Config, EqBand } from './Types';\nimport { Biquad } from './Biquad';\n\nexport class Equaliser {\n\n\tprivate readonly filters: Array<Biquad>;\n\n\tconstructor(config: Pick<Config, \"rate\">, bands: ReadonlyArray<EqBand>) {\n\t\tconst { rate } = config;\n\t\tthis.filters = bands.map(({ f, g, q }) => Biquad.create_bandpass(f, g, q, rate));\n\t}\n\n\tapply(signal: Float32Array) {\n\t\tfor (const filter of this.filters) {\n\t\t\tfilter.apply(signal);\n\t\t}\n\t}\n\n}\n","import { Config } from './Types';\n\nconst padding = 0.01;\nconst nonpadding = 1 - (2 * padding);\n\nexport class Mapping {\n\n\tpublic readonly fmin: number;\n\tpublic readonly fmax: number;\n\n\tpublic readonly width: number;\n\tpublic readonly height: number;\n\n\tconstructor(\n\t\tprivate readonly config: Config,\n\t\tcanvas: HTMLCanvasElement | null = null,\n\t\tpublic readonly db_min: number = -60,\n\t\tpublic readonly db_max: number = +60,\n\t) {\n\t\tthis.fmin = 10;\n\t\tthis.fmax = Math.min(20000, config.rate / 2);\n\t\tthis.width = canvas?.width ?? 0;\n\t\tthis.height = canvas?.height ?? 0;\n\t}\n\n\tproject(x: number, y: number): [number, number] {\n\t\tconst { width, height } = this;\n\t\treturn [\n\t\t\t(x * nonpadding + padding) * width,\n\t\t\t(y * nonpadding + padding) * height\n\t\t];\n\t}\n\n\tlevel_to_db(level: number): number {\n\t\tconst { db_min, db_max } = this;\n\t\treturn Math.min(db_max, Math.max(db_min, 20 * Math.log10(level)));\n\t}\n\n\ti_to_f(i: number): number {\n\t\tconst { rate, size } = this.config;\n\t\treturn i * rate / size;\n\t}\n\n\tf_to_i(f: number): number {\n\t\tconst { size, rate } = this.config;\n\t\treturn Math.min(size / 2 - 1, Math.max(0, Math.round(f * size / rate)));\n\t}\n\n\tproject_x(x: number, xmin: number, xmax: number): number {\n\t\tconst lx = Math.log(x);\n\t\tconst lmin = Math.log(xmin);\n\t\tconst lmax = Math.log(xmax);\n\t\treturn (lx - lmin) / (lmax - lmin);\n\t}\n\n\tproject_f(f: number): number {\n\t\treturn this.project_x(f, this.fmin, this.fmax);\n\t}\n\n\tproject_db(db: number): number {\n\t\tconst { db_min, db_max } = this;\n\t\treturn (db_max - db) / (db_max - db_min);\n\t}\n\n\tunproject(u: number, v: number): [number, number] {\n\t\tconst { width, height } = this;\n\t\treturn [\n\t\t\t(u / width - padding) / nonpadding,\n\t\t\t(v / height - padding) / nonpadding,\n\t\t];\n\t}\n\n\tunproject_f(u: number): number {\n\t\tconst { fmin, fmax } = this;\n\t\tconst lmin = Math.log(fmin);\n\t\tconst lmax = Math.log(fmax);\n\t\treturn Math.exp(u * (lmax - lmin) + lmin);\n\t}\n\n\tunproject_i(u: number): number {\n\t\tconst { size, rate } = this.config;\n\t\tconst f = this.unproject_f(u);\n\t\treturn this.f_to_i(Math.round(f * size / rate));\n\t}\n\n\tunproject_db(v: number): number {\n\t\tconst { db_min, db_max } = this;\n\t\treturn db_max - (v * (db_max - db_min));\n\t}\n\n}\n","import { Config, EqBand } from './Types';\nimport { Mapping } from './Mapping';\nimport { Equaliser } from './Equaliser';\nimport { SignalFactory } from './SignalFactory';\nimport { SerialRequest, SerialInitRequest, SerialResponse, SerialJobResponse } from './SerialTypes';\n\nclass SerialWorker {\n\n\tprivate readonly sine: Float32Array;\n\n\tconstructor(\n\t\tprivate readonly config: Config,\n\t\tprivate readonly freq: number\n\t) {\n\t\tconst { rate } = config;\n\t\tconst period = rate / freq;\n\t\tconst size = period;\n\t\tthis.sine = new SignalFactory({ size, rate }).generate_sine(freq);\n\t}\n\n\tcalculate(bands: ReadonlyArray<EqBand>): Record<'freq' | 'db', number> {\n\t\tconst mapping = new Mapping(this.config);\n\t\tconst signal = new Float32Array(this.sine);\n\t\tconst eq = new Equaliser(this.config, bands);\n\t\teq.apply(signal);\n\t\tconst level = signal.reduce((a, b) => Math.max(a, Math.abs(b)), 0);\n\t\tconst freq = this.freq;\n\t\tconst db = mapping.level_to_db(level);\n\t\treturn { freq, db };\n\t}\n\n}\n\nlet worker: SerialWorker;\n\nfunction send(message: SerialResponse) {\n\tself.postMessage(message);\n}\n\nfunction worker_onmessage({ data }: MessageEvent<SerialRequest>) {\n\tconsole.log('Message in worker', data);\n\tif (data.type === 'init') {\n\t\tconst { config, freq } = data;\n\t\tworker = new SerialWorker(config, freq);\n\t}\n\tif (!worker) {\n\t\treturn;\n\t}\n\tif (data.type === 'job') {\n\t\tconst { id, bands } = data;\n\t\tconst { freq, db } = worker.calculate(bands);\n\t\tsend({ type: 'result', id, freq, db });\n\t}\n}\n\nself.onmessage = worker_onmessage;\n","import { Config, SignalType, Signal, Signals } from './Types';\n\nexport class SignalFactory {\n\n\tconstructor(private readonly config: Pick<Config, \"size\" | \"rate\">) {\n\t}\n\n\tgenerate_all(): Signals {\n\t\treturn {\n\t\t\tnoise: this.generate_noise(),\n\t\t\tpure: this.generate_sine(this.config.rate / 4),\n\t\t}\n\t}\n\n\tgenerate_noise(): Signal {\n\t\tconst { size } = this.config;\n\t\tconst signal = new Float32Array(size);\n\t\tfor (let i = 0; i < size; ++i) {\n\t\t\tsignal[i] += (2 * Math.random() - 1) * Math.sqrt(size) * 2;\n\t\t}\n\t\treturn signal;\n\t}\n\n\tgenerate_sine(f: number): Signal {\n\t\tconst { size, rate } = this.config;\n\t\tconst signal = new Float32Array(size);\n\t\tfor (let i = 0; i < size; ++i) {\n\t\t\tsignal[i] = Math.sin(2 * Math.PI * f * i / rate)\n\t\t}\n\t\treturn signal;\n\t}\n\n};\n"],"names":["Biquad","constructor","a1","a2","b0","b1","b2","xz1","xz2","yz1","yz2","static","freq","gain","q","rate","A","Math","pow","w","PI","sn","sin","cs","cos","a","a0","reset","this","apply","signal","N","length","Float32Array","i","x","y","config","bands","filters","map","f","g","create_bandpass","filter","padding","nonpadding","canvas","db_min","db_max","fmin","fmax","min","width","height","project","level_to_db","level","max","log10","i_to_f","size","f_to_i","round","project_x","xmin","xmax","lx","log","lmin","project_f","project_db","db","unproject","u","v","unproject_f","lmax","exp","unproject_i","unproject_db","SerialWorker","sine","SignalFactory","generate_sine","calculate","mapping","Mapping","Equaliser","reduce","b","abs","worker","self","onmessage","data","console","type","message","id","postMessage","generate_all","noise","generate_noise","pure","random","sqrt"],"sourceRoot":""}