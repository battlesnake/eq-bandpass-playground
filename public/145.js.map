{"version":3,"file":"145.js","mappings":"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","sources":["webpack://js/./src/Mapping.ts","webpack://js/./src/Biquad.ts","webpack://js/./src/Equaliser.ts","webpack://js/./src/SignalFactory.ts","webpack://js/./src/SerialWorker.ts"],"sourcesContent":["import { Config } from './Types';\n\nconst padding = 0.01;\nconst nonpadding = 1 - (2 * padding);\n\nexport class Mapping {\n\n\tpublic readonly fmin: number;\n\tpublic readonly fmax: number;\n\n\tpublic readonly width: number;\n\tpublic readonly height: number;\n\n\tconstructor(\n\t\tprivate readonly config: Config,\n\t\tcanvas: HTMLCanvasElement | null = null,\n\t\tpublic readonly db_min: number = -60,\n\t\tpublic readonly db_max: number = +60,\n\t) {\n\t\tthis.fmin = 10;\n\t\tthis.fmax = Math.min(20000, config.rate / 2);\n\t\tthis.width = canvas?.width ?? 0;\n\t\tthis.height = canvas?.height ?? 0;\n\t}\n\n\tproject(x: number, y: number): [number, number] {\n\t\tconst { width, height } = this;\n\t\treturn [\n\t\t\t(x * nonpadding + padding) * width,\n\t\t\t(y * nonpadding + padding) * height\n\t\t];\n\t}\n\n\tlevel_to_db(level: number): number {\n\t\tconst { db_min, db_max } = this;\n\t\treturn Math.min(db_max, Math.max(db_min, 20 * Math.log10(level)));\n\t}\n\n\ti_to_f(i: number): number {\n\t\tconst { rate, size } = this.config;\n\t\treturn i * rate / size;\n\t}\n\n\tf_to_i(f: number): number {\n\t\tconst { size, rate } = this.config;\n\t\treturn Math.min(size / 2 - 1, Math.max(0, Math.round(f * size / rate)));\n\t}\n\n\tproject_x(x: number, xmin: number, xmax: number): number {\n\t\tconst lx = Math.log(x);\n\t\tconst lmin = Math.log(xmin);\n\t\tconst lmax = Math.log(xmax);\n\t\treturn (lx - lmin) / (lmax - lmin);\n\t}\n\n\tproject_f(f: number): number {\n\t\treturn this.project_x(f, this.fmin, this.fmax);\n\t}\n\n\tproject_db(db: number): number {\n\t\tconst { db_min, db_max } = this;\n\t\treturn (db_max - db) / (db_max - db_min);\n\t}\n\n\tunproject(u: number, v: number): [number, number] {\n\t\tconst { width, height } = this;\n\t\treturn [\n\t\t\t(u / width - padding) / nonpadding,\n\t\t\t(v / height - padding) / nonpadding,\n\t\t];\n\t}\n\n\tunproject_f(u: number): number {\n\t\tconst { fmin, fmax } = this;\n\t\tconst lmin = Math.log(fmin);\n\t\tconst lmax = Math.log(fmax);\n\t\treturn Math.exp(u * (lmax - lmin) + lmin);\n\t}\n\n\tunproject_i(u: number): number {\n\t\tconst { size, rate } = this.config;\n\t\tconst f = this.unproject_f(u);\n\t\treturn this.f_to_i(Math.round(f * size / rate));\n\t}\n\n\tunproject_db(v: number): number {\n\t\tconst { db_min, db_max } = this;\n\t\treturn db_max - (v * (db_max - db_min));\n\t}\n\n}\n","export class Biquad {\n\n\tprivate xz1: number = 0;\n\tprivate xz2: number = 0;\n\n\tprivate yz1: number = 0;\n\tprivate yz2: number = 0;\n\n\tconstructor (\n\t\tpublic readonly a1: number = 0,\n\t\tpublic readonly a2: number = 0,\n\t\tpublic readonly b0: number = 0,\n\t\tpublic readonly b1: number = 0,\n\t\tpublic readonly b2: number = 0\n\t) {\n\t}\n\n\tpublic static create_bandpass(freq: number, gain: number, q: number, rate: number): Biquad {\n\t\tconst A = Math.pow(10, gain / 40);\n\t\tconst w = 2 * Math.PI * freq / rate;\n\t\tconst sn = Math.sin(w);\n\t\tconst cs = Math.cos(w);\n\t\tconst a = sn / (2 * q);\n\t\tconst a0 = 1 + a / A;\n\t\tconst a1 = -2 * cs;\n\t\tconst a2 = 1 - a / A;\n\t\tconst b0 = 1 + a * A;\n\t\tconst b1 = -2 * cs;\n\t\tconst b2 = 1 - a * A;\n\t\treturn new Biquad(a1 / a0, a2 / a0, b0 / a0, b1 / a0, b2 / a0);\n\t}\n\n\tpublic reset() {\n\t\tthis.xz1 = 0;\n\t\tthis.xz2 = 0;\n\t\tthis.yz1 = 0;\n\t\tthis.yz2 = 0;\n\t}\n\n\tpublic apply(signal: Float32Array) {\n\t\tconst a1 = this.a1;\n\t\tconst a2 = this.a2;\n\t\tconst b0 = this.b0;\n\t\tconst b1 = this.b1;\n\t\tconst b2 = this.b2;\n\t\tlet xz1 = this.xz1;\n\t\tlet xz2 = this.xz1;\n\t\tlet yz1 = this.yz1;\n\t\tlet yz2 = this.yz2;\n\t\tconst N = signal.length;\n\t\tconst ys = new Float32Array(N);\n\t\tfor (let i = 0; i < N; ++i) {\n\t\t\tconst x = signal[i];\n\t\t\tconst y = x * b0 + xz1 * b1 + xz2 * b2 - yz1 * a1 - yz2 * a2\n\t\t\tsignal[i] = y;\n\t\t\txz2 = xz1;\n\t\t\txz1 = x;\n\t\t\tyz2 = yz1;\n\t\t\tyz1 = y;\n\t\t}\n\t\tthis.xz1 = xz1;\n\t\tthis.xz2 = xz1;\n\t\tthis.yz1 = yz1;\n\t\tthis.yz2 = yz2;\n\t}\n\n}\n","import { Config, EqBand } from './Types';\nimport { Biquad } from './Biquad';\n\nexport class Equaliser {\n\n\tprivate readonly filters: Array<Biquad>;\n\n\tconstructor(config: Pick<Config, \"rate\">, bands: ReadonlyArray<EqBand>) {\n\t\tconst { rate } = config;\n\t\tthis.filters = bands.map(({ f, g, q }) => Biquad.create_bandpass(f, g, q, rate));\n\t}\n\n\tapply(signal: Float32Array) {\n\t\tfor (const filter of this.filters) {\n\t\t\tfilter.apply(signal);\n\t\t}\n\t}\n\n}\n","import { Config, SignalType, Signal, Signals } from './Types';\n\nexport class SignalFactory {\n\n\tconstructor(private readonly config: Pick<Config, \"size\" | \"rate\">) {\n\t}\n\n\tgenerate_all(): Signals {\n\t\treturn {\n\t\t\tnoise: this.generate_noise(),\n\t\t\tpure: this.generate_sine(this.config.rate / 4),\n\t\t}\n\t}\n\n\tgenerate_noise(): Signal {\n\t\tconst { size } = this.config;\n\t\tconst signal = new Float32Array(size);\n\t\tfor (let i = 0; i < size; ++i) {\n\t\t\tsignal[i] += (2 * Math.random() - 1) * Math.sqrt(size) * 2;\n\t\t}\n\t\treturn signal;\n\t}\n\n\tgenerate_sinusoid(f: number, phase: number = 0): Signal {\n\t\tconst { size, rate } = this.config;\n\t\tconst signal = new Float32Array(size);\n\t\tfor (let i = 0; i < size; ++i) {\n\t\t\tsignal[i] = Math.sin(2 * Math.PI * f * i / rate + phase)\n\t\t}\n\t\treturn signal;\n\t}\n\n\tgenerate_sine(f: number): Signal {\n\t\treturn this.generate_sinusoid(f, 0);\n\t}\n\n\tgenerate_cosine(f: number): Signal {\n\t\treturn this.generate_sinusoid(f, Math.PI / 2);\n\t}\n\n};\n","import { Config, EqBand } from './Types';\nimport { Mapping } from './Mapping';\nimport { Equaliser } from './Equaliser';\nimport { SignalFactory } from './SignalFactory';\nimport { SerialRequest, SerialInitRequest, SerialJobRequest, SerialResponse, SerialJobResponse } from './SerialTypes';\n\nconst signal_periods = 6;\nconst skip_periods = 4;\n\nclass SerialWorker {\n\n\tprivate readonly sine: Float32Array;\n\tprivate readonly cosine: Float32Array;\n\tprivate readonly period: number;\n\n\tconstructor(\n\t\tprivate readonly config: Config,\n\t\tprivate readonly freq: number\n\t) {\n\t\tconst { rate } = config;\n\t\tconst period = rate / freq;\n\t\tconst size = period * signal_periods;\n\t\tthis.sine = new SignalFactory({ size, rate }).generate_sine(freq);\n\t\tthis.cosine = new SignalFactory({ size, rate }).generate_cosine(freq);\n\t\tthis.period = period;\n\t}\n\n\tprivate normalised_inner_product(a: Float32Array, b: Float32Array): number {\n\t\tif (a.length < b.length) {\n\t\t\tthrow new Error('Domain error');\n\t\t}\n\t\tlet sum = 0;\n\t\tfor (let i = 0, n = b.length; i < n; ++i) {\n\t\t\tsum += a[i] * b[i];\n\t\t}\n\t\treturn sum * 2 / b.length;\n\t}\n\n\tprivate analyse_signal(b: Float32Array) {\n\t\tconst sn = this.normalised_inner_product(this.sine, b);\n\t\tconst cs = this.normalised_inner_product(this.cosine, b);\n\t\treturn {\n\t\t\tmagnitude: Math.hypot(cs, sn),\n\t\t\t// phase: Math.atan2(cs, sn),\n\t\t};\n\t}\n\n\tcalculate(bands: ReadonlyArray<EqBand>): Record<'freq' | 'db', number> {\n\t\tconst mapping = new Mapping(this.config);\n\t\tconst signal = new Float32Array(this.sine);\n\t\tconst eq = new Equaliser(this.config, bands);\n\t\teq.apply(signal);\n\t\tconst filtered = signal.subarray(this.period * skip_periods);\n\t\tconst { magnitude /*, phase*/ } = this.analyse_signal(filtered);\n\t\tconst freq = this.freq;\n\t\tconst db = mapping.level_to_db(magnitude);\n\t\treturn { freq, db };\n\t}\n\n}\n\nlet worker: SerialWorker;\n\nfunction send(message: SerialResponse) {\n\tself.postMessage(message);\n}\n\nfunction worker_oninit(data: SerialInitRequest) {\n\tconst { config, freq } = data;\n\tworker = new SerialWorker(config, freq);\n}\n\nfunction worker_onjob(data: SerialJobRequest): SerialJobResponse {\n\tconst { id, bands } = data;\n\tconst { freq, db } = worker.calculate(bands);\n\treturn { type: 'result', id, freq, db };\n}\n\nfunction worker_onmessage({ data }: MessageEvent<SerialRequest>) {\n\tif (data.type === 'init') {\n\t\treturn worker_oninit(data);\n\t}\n\tif (data.type === 'job') {\n\t\tsend(worker_onjob(data));\n\t}\n}\n\nself.onmessage = worker_onmessage;\n"],"names":["padding","nonpadding","Mapping","constructor","config","canvas","db_min","db_max","this","fmin","fmax","Math","min","rate","width","height","project","x","y","level_to_db","level","max","log10","i_to_f","i","size","f_to_i","f","round","project_x","xmin","xmax","lx","log","lmin","project_f","project_db","db","unproject","u","v","unproject_f","lmax","exp","unproject_i","unproject_db","Biquad","a1","a2","b0","b1","b2","xz1","xz2","yz1","yz2","static","freq","gain","q","A","pow","w","PI","sn","sin","cs","cos","a","a0","reset","apply","signal","N","length","Float32Array","Equaliser","bands","filters","map","g","create_bandpass","filter","SignalFactory","generate_all","noise","generate_noise","pure","generate_sine","random","sqrt","generate_sinusoid","phase","generate_cosine","SerialWorker","period","sine","cosine","normalised_inner_product","b","Error","sum","n","analyse_signal","magnitude","hypot","calculate","mapping","filtered","subarray","worker","self","onmessage","data","type","worker_oninit","message","id","worker_onjob","postMessage"],"sourceRoot":""}