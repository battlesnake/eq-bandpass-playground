{"version":3,"file":"main.js","mappings":"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","sources":["webpack://js/./src/Biquad.ts","webpack://js/./src/ControlsView.ts","webpack://js/./src/CursorView.ts","webpack://js/./src/DefaultModel.ts","webpack://js/./src/Equaliser.ts","webpack://js/./src/FourierStrategy.ts","webpack://js/./src/MainController.ts","webpack://js/./src/Mapping.ts","webpack://js/./src/SerialStrategy.ts","webpack://js/./src/SignalFactory.ts","webpack://js/./src/SpectrumView.ts","webpack://js/./src/frequencies.ts","webpack://js/./src/main.ts"],"sourcesContent":["export class Biquad {\n\n\tprivate xz1: number = 0;\n\tprivate xz2: number = 0;\n\n\tprivate yz1: number = 0;\n\tprivate yz2: number = 0;\n\n\tconstructor (\n\t\tpublic readonly a1: number = 0,\n\t\tpublic readonly a2: number = 0,\n\t\tpublic readonly b0: number = 0,\n\t\tpublic readonly b1: number = 0,\n\t\tpublic readonly b2: number = 0\n\t) {\n\t}\n\n\tpublic static create_bandpass(freq: number, gain: number, q: number, rate: number): Biquad {\n\t\tconst A = Math.pow(10, gain / 40);\n\t\tconst w = 2 * Math.PI * freq / rate;\n\t\tconst sn = Math.sin(w);\n\t\tconst cs = Math.cos(w);\n\t\tconst a = sn / (2 * q);\n\t\tconst a0 = 1 + a / A;\n\t\tconst a1 = -2 * cs;\n\t\tconst a2 = 1 - a / A;\n\t\tconst b0 = 1 + a * A;\n\t\tconst b1 = -2 * cs;\n\t\tconst b2 = 1 - a * A;\n\t\treturn new Biquad(a1 / a0, a2 / a0, b0 / a0, b1 / a0, b2 / a0);\n\t}\n\n\tpublic reset() {\n\t\tthis.xz1 = 0;\n\t\tthis.xz2 = 0;\n\t\tthis.yz1 = 0;\n\t\tthis.yz2 = 0;\n\t}\n\n\tpublic apply(signal: Float32Array) {\n\t\tconst a1 = this.a1;\n\t\tconst a2 = this.a2;\n\t\tconst b0 = this.b0;\n\t\tconst b1 = this.b1;\n\t\tconst b2 = this.b2;\n\t\tlet xz1 = this.xz1;\n\t\tlet xz2 = this.xz1;\n\t\tlet yz1 = this.yz1;\n\t\tlet yz2 = this.yz2;\n\t\tconst N = signal.length;\n\t\tconst ys = new Float32Array(N);\n\t\tfor (let i = 0; i < N; ++i) {\n\t\t\tconst x = signal[i];\n\t\t\tconst y = x * b0 + xz1 * b1 + xz2 * b2 - yz1 * a1 - yz2 * a2\n\t\t\tsignal[i] = y;\n\t\t\txz2 = xz1;\n\t\t\txz1 = x;\n\t\t\tyz2 = yz1;\n\t\t\tyz1 = y;\n\t\t}\n\t\tthis.xz1 = xz1;\n\t\tthis.xz2 = xz1;\n\t\tthis.yz1 = yz1;\n\t\tthis.yz2 = yz2;\n\t}\n\n}\n","import { Model, Controller, View } from './Types';\nimport { eq_freq } from './frequencies';\n\nconst d3 = require('d3');\n\nexport class ControlsView implements View {\n\n\tconstructor(\n\t\tprivate readonly model: Model\n\t) {\n\t}\n\n\tbind(controller: Controller) {\n\t\t/* Bandwidth */\n\t\tconst q = d3.select(\"aside\")\n\t\t\t.selectAll(\"label.control.q\")\n\t\t\t.data([1])\n\t\t\t.enter()\n\t\t\t\t.append(\"label\")\n\t\t\t\t.attr(\"class\", \"control q\")\n\t\t\t\t;\n\t\tq.append(\"span\")\n\t\t\t.attr(\"class\", \"control-name q\")\n\t\t\t.text(\"q\")\n\t\t\t;\n\t\tq.append(\"input\")\n\t\t\t.attr(\"class\", \"slider q\")\n\t\t\t.attr(\"type\", \"range\")\n\t\t\t.attr(\"min\", \"-10\")\n\t\t\t.attr(\"max\", \"10\")\n\t\t\t.attr(\"value\", 0)\n\t\t\t.on(\"input\", (e) => controller.set_q(Math.pow(10, e.currentTarget.value / 10)));\n\t\t\t;\n\t\tq.append(\"span\")\n\t\t\t.attr(\"class\", \"control-value q\")\n\t\t\t.text(\"\")\n\t\t\t;\n\t\t/* Gain */\n\t\tconst bars = d3.select(\"aside\")\n\t\t\t.selectAll(\"label.control.eq.g\")\n\t\t\t.data(eq_freq.map((x, i) => ({ x, i })))\n\t\t\t.enter()\n\t\t\t\t.append(\"label\")\n\t\t\t\t.attr(\"class\", \"control eq g\")\n\t\t\t\t;\n\t\tbars.append(\"span\")\n\t\t\t.attr(\"class\", \"control-name eq\")\n\t\t\t.text(({ x }) => x < 1000 ? `${x}` : `${x / 1000}k`)\n\t\t\t;\n\t\tbars.append(\"input\")\n\t\t\t.attr(\"class\", \"slider eq\")\n\t\t\t.attr(\"type\", \"range\")\n\t\t\t.attr(\"min\", \"-32\")\n\t\t\t.attr(\"max\", \"32\")\n\t\t\t.attr(\"value\", 0)\n\t\t\t.on(\"input\", (e, { i }) => controller.set_gain(i, e.currentTarget.value))\n\t\t\t;\n\t\tbars.append(\"span\")\n\t\t\t.attr(\"class\", \"control-value eq\")\n\t\t\t.text(\"\")\n\t\t\t;\n\t}\n\n\tupdate() {\n\t\tconst model = this.model;\n\t\t/* Bandwidth */\n\t\tconst q = d3.select(\"aside\")\n\t\t\t.selectAll(\"label.control.q\")\n\t\t\t.data([model.q])\n\t\t\t;\n\t\tq.select(\".slider.q\")\n\t\t\t.attr(\"value\", x => Math.round(Math.log10(model.q) * 10))\n\t\t\t;\n\t\tq.select(\".control-value.q\")\n\t\t\t.text(x => x.toFixed(1))\n\t\t\t;\n\t\t/* Gain */\n\t\tconst controls = d3.select(\"aside\")\n\t\t\t.selectAll(\"label.control.eq\")\n\t\t\t.data(model.eq)\n\t\t\t;\n\t\tcontrols\n\t\t\t.select(\".slider.eq\")\n\t\t\t.attr(\"value\", x => x.g)\n\t\t\t;\n\t\tcontrols\n\t\t\t.select(\".control-value.eq\")\n\t\t\t.text(x => `${x.g}dB`)\n\t\t\t;\n\t}\n\n}\n","import { Model, Controller, View } from \"./Types\";\n\nconst d3 = require(\"d3\");\n\nexport class CursorView implements View {\n\n\tprivate readonly node: d3.Selection<HTMLElement, {}, HTMLElement, any>;\n\n\tconstructor(\n\t\tprivate readonly model: Model\n\t) {\n\t\tthis.node = d3.select(\".cursor\");\n\t}\n\n\tbind(controller: Controller) {\n\t\tthis.node\n\t\t\t.append(\"span\")\n\t\t\t.attr(\"class\", \"cursor-x\")\n\t\t\t;\n\t\tthis.node\n\t\t\t.append(\"span\")\n\t\t\t.attr(\"class\", \"cursor-y\")\n\t\t\t;\n\t\tthis.node\n\t\t\t.append(\"span\")\n\t\t\t.attr(\"class\", \"cursor-v\")\n\t\t\t;\n\t}\n\n\tupdate() {\n\t\tconst { cursor_f, cursor_db, value_db } = this.model.cursor;\n\t\tthis.node.select(\".cursor-x\")\n\t\t\t.text(`x: ${cursor_f.toFixed(0)} Hz`)\n\t\t\t;\n\t\tthis.node.select(\".cursor-y\")\n\t\t\t.text(`y: ${cursor_db.toFixed(2)} dB`)\n\t\t\t;\n\t\tthis.node.select(\".cursor-v\")\n\t\t\t.text(`value: ${value_db?.toFixed(2) ?? \"-\"} dB`)\n\t\t\t;\n\t}\n\n}\n","import { Model, SignalType, EqBand, Cursor, AnalysisStrategy } from './Types';\nimport { eq_freq } from './frequencies';\n\nconst INITIAL_G = 0;\nconst INITIAL_Q = 1;\n\nexport class DefaultModel implements Model {\n\tpublic q: number = INITIAL_Q;\n\tpublic eq: Array<EqBand> = eq_freq.map((f, i) => ({ i, f, g: INITIAL_G, q: INITIAL_Q }));\n\tpublic cursor: Cursor = { cursor_f: 0, cursor_db: 0, value_db: null };\n\t/* (freq, db)... */\n\tpublic spectrum: Float32Array = new Float32Array(0);\n\n\tprivate interpolate_db(f: number): number | null {\n\t\tconst spectrum = this.spectrum;\n\t\tfor (let i = 0; i < spectrum.length - 2; i += 2) {\n\t\t\tconst f0 = spectrum[i];\n\t\t\tconst f1 = spectrum[i + 2];\n\t\t\tif (f >= f0 && f <= f1 && f1 > f0) {\n\t\t\t\tconst lerp = (f - f0) / (f1 - f0);\n\t\t\t\tconst db0 = spectrum[i + 1];\n\t\t\t\tconst db1 = spectrum[i + 3];\n\t\t\t\treturn db0 + lerp * (db1 - db0);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate update_cursor() {\n\t\tthis.cursor.value_db = this.interpolate_db(this.cursor.cursor_f);\n\t}\n\n\tprivate update_eq() {\n\t\tthis.spectrum = this.strategy.calculate(this.eq);\n\t\tthis.update_cursor();\n\t}\n\n\tconstructor(\n\t\tprivate readonly strategy: AnalysisStrategy\n\t) {\n\t}\n\n\tset_q(value: number) {\n\t\tthis.q = value\n\t\tfor (const band of this.eq) {\n\t\t\tband.q = value;\n\t\t}\n\t\tthis.update_eq();\n\t}\n\n\tset_gain(band: number, value: number) {\n\t\tthis.eq[band].g = value;\n\t\tthis.update_eq();\n\t}\n\n\tset_cursor(cursor_f: number, cursor_db: number) {\n\t\tthis.cursor = { cursor_f, cursor_db, value_db: null };\n\t\tthis.update_cursor();\n\t}\n\n}\n","import { Config, EqBand } from './Types';\nimport { Biquad } from './Biquad';\n\nexport class Equaliser {\n\n\tprivate readonly filters: Array<Biquad>;\n\n\tconstructor(config: Pick<Config, \"rate\">, bands: ReadonlyArray<EqBand>) {\n\t\tconst { rate } = config;\n\t\tthis.filters = bands.map(({ f, g, q }) => Biquad.create_bandpass(f, g, q, rate));\n\t}\n\n\tapply(signal: Float32Array) {\n\t\tfor (const filter of this.filters) {\n\t\t\tfilter.apply(signal);\n\t\t}\n\t}\n\n}\n","import { AnalysisStrategy, Config, Model, SignalType, EqBand, Signal } from './Types';\nimport { Mapping } from './Mapping';\nimport { SignalFactory } from './SignalFactory';\nimport { Equaliser } from './Equaliser';\n\nimport FFT from 'fft.js';\n\nexport class FourierStrategy implements AnalysisStrategy {\n\n\tprivate readonly fft: typeof FFT;\n\tprivate readonly signal: Signal;\n\tprivate readonly baseline: Readonly<Float32Array>;\n\n\tprivate get_spectrum(signal: Readonly<Float32Array>): Float32Array {\n\t\tconst mapping = new Mapping(this.config);\n\t\tconst { size } = this.config;\n\t\tconst transform = new Float32Array(size * 2);\n\t\t(this.fft as any).realTransform(transform, [...signal]);\n\t\tconst result = new Float32Array(size);\n\t\tfor (let i = 0; i < size; i += 2) {\n\t\t\tconst level = Math.hypot(transform[i], transform[i + 1]) / Math.sqrt(signal.length) / 128;\n\t\t\tresult[i] = mapping.i_to_f(i / 2);\n\t\t\tresult[i + 1] = level;\n\t\t}\n\t\treturn result;\n\t}\n\n\tconstructor(\n\t\tprivate readonly config: Config,\n\t) {\n\t\tthis.fft = new (FFT as any)(config.size);\n\t\tthis.signal = new SignalFactory(config).generate_noise();\n\t\tthis.baseline = this.get_spectrum(this.signal);\n\t}\n\n\tcalculate(bands: ReadonlyArray<EqBand>): Float32Array {\n\t\tconst mapping = new Mapping(this.config);\n\t\tconst { size } = this.config;\n\t\tconst signal = new Float32Array(this.signal);\n\t\tconst eq = new Equaliser(this.config, bands);\n\t\teq.apply(signal);\n\t\tconst spectrum = this.get_spectrum(signal);\n\t\tfor (let i = 1; i < spectrum.length; i += 2) {\n\t\t\tspectrum[i] = mapping.level_to_db(spectrum[i] / this.baseline[i]);\n\t\t}\n\t\treturn spectrum;\n\t}\n\n}\n","import { Signals, Cursor, Config, Model, Controller, View } from './Types';\n\nexport class MainController implements Controller {\n\n\tconstructor(\n\t\tprivate readonly config: Readonly<Config>,\n\t\tprivate readonly model: Model,\n\t\tprivate readonly views: ReadonlyArray<View>\n\t) {\n\t\tfor (const view of this.views) {\n\t\t\tview.bind(this);\n\t\t}\n\t\tthis.update();\n\t}\n\n\tprivate update() {\n\t\tfor (const view of this.views) {\n\t\t\tview.update();\n\t\t}\n\t}\n\n\tset_q(value: number) {\n\t\tthis.model.set_q(value);\n\t\tthis.update();\n\t}\n\n\tset_gain(index: number, value: number) {\n\t\tthis.model.set_gain(index, value);\n\t\tthis.update();\n\t}\n\n\tset_cursor(cursor_f: number, cursor_db: number) {\n\t\tthis.model.set_cursor(cursor_f, cursor_db);\n\t\tthis.update();\n\t}\n\n}\n","import { Config } from './Types';\n\nconst padding = 0.01;\nconst nonpadding = 1 - (2 * padding);\n\nexport class Mapping {\n\n\tpublic readonly fmin: number;\n\tpublic readonly fmax: number;\n\n\tpublic readonly width: number;\n\tpublic readonly height: number;\n\n\tconstructor(\n\t\tprivate readonly config: Config,\n\t\tcanvas: HTMLCanvasElement | null = null,\n\t\tpublic readonly db_min: number = -60,\n\t\tpublic readonly db_max: number = +60,\n\t) {\n\t\tthis.fmin = 10;\n\t\tthis.fmax = Math.min(20000, config.rate / 2);\n\t\tthis.width = canvas?.width ?? 0;\n\t\tthis.height = canvas?.height ?? 0;\n\t}\n\n\tproject(x: number, y: number): [number, number] {\n\t\tconst { width, height } = this;\n\t\treturn [\n\t\t\t(x * nonpadding + padding) * width,\n\t\t\t(y * nonpadding + padding) * height\n\t\t];\n\t}\n\n\tlevel_to_db(level: number): number {\n\t\tconst { db_min, db_max } = this;\n\t\treturn Math.min(db_max, Math.max(db_min, 20 * Math.log10(level)));\n\t}\n\n\ti_to_f(i: number): number {\n\t\tconst { rate, size } = this.config;\n\t\treturn i * rate / size;\n\t}\n\n\tf_to_i(f: number): number {\n\t\tconst { size, rate } = this.config;\n\t\treturn Math.min(size / 2 - 1, Math.max(0, Math.round(f * size / rate)));\n\t}\n\n\tproject_x(x: number, xmin: number, xmax: number): number {\n\t\tconst lx = Math.log(x);\n\t\tconst lmin = Math.log(xmin);\n\t\tconst lmax = Math.log(xmax);\n\t\treturn (lx - lmin) / (lmax - lmin);\n\t}\n\n\tproject_f(f: number): number {\n\t\treturn this.project_x(f, this.fmin, this.fmax);\n\t}\n\n\tproject_db(db: number): number {\n\t\tconst { db_min, db_max } = this;\n\t\treturn (db_max - db) / (db_max - db_min);\n\t}\n\n\tunproject(u: number, v: number): [number, number] {\n\t\tconst { width, height } = this;\n\t\treturn [\n\t\t\t(u / width - padding) / nonpadding,\n\t\t\t(v / height - padding) / nonpadding,\n\t\t];\n\t}\n\n\tunproject_f(u: number): number {\n\t\tconst { fmin, fmax } = this;\n\t\tconst lmin = Math.log(fmin);\n\t\tconst lmax = Math.log(fmax);\n\t\treturn Math.exp(u * (lmax - lmin) + lmin);\n\t}\n\n\tunproject_i(u: number): number {\n\t\tconst { size, rate } = this.config;\n\t\tconst f = this.unproject_f(u);\n\t\treturn this.f_to_i(Math.round(f * size / rate));\n\t}\n\n\tunproject_db(v: number): number {\n\t\tconst { db_min, db_max } = this;\n\t\treturn db_max - (v * (db_max - db_min));\n\t}\n\n}\n","import { AnalysisStrategy, Config, Model, Signals, EqBand } from './Types';\nimport { Mapping } from './Mapping';\nimport { Equaliser } from './Equaliser';\nimport { SignalFactory } from './SignalFactory';\n\nexport class SerialStrategy implements AnalysisStrategy {\n\n\tprivate readonly sines: Array<{ f: number; y: Float32Array }>;\n\n\tconstructor(\n\t\tprivate readonly config: Config,\n\t) {\n\t\tconst { rate } = this.config;\n\t\tconst mapping = new Mapping(this.config);\n\t\tconst lmin = Math.floor(Math.log10(mapping.fmin)) | 0;\n\t\tconst lmax = Math.ceil(Math.log10(mapping.fmax)) | 0;\n\t\tconst res = 20;\n\t\tconst pts = res * (lmax - lmin)\n\t\tthis.sines = new Array(pts).fill(null).map((_, i) => {\n\t\t\tconst lm = i / res + lmin;\n\t\t\tconst f = Math.pow(10, lm);\n\t\t\tconst period = rate / f;\n\t\t\tconst size = period;\n\t\t\tconst y = new SignalFactory({ size, rate }).generate_sine(f);\n\t\t\treturn { f, y };\n\t\t});\n\t}\n\n\tcalculate(bands: ReadonlyArray<EqBand>): Float32Array {\n\t\tconst mapping = new Mapping(this.config);\n\t\tconst result = new Float32Array(this.sines.length * 2);\n\t\tlet out_it = 0;\n\t\tfor (const { f, y } of this.sines) {\n\t\t\tconst signal = new Float32Array(y);\n\t\t\tconst eq = new Equaliser(this.config, bands);\n\t\t\teq.apply(signal);\n\t\t\tconst level = signal.reduce((a, b) => Math.max(a, Math.abs(b)), 0);\n\t\t\tconst db = mapping.level_to_db(level);\n\t\t\tresult[out_it++] = f;\n\t\t\tresult[out_it++] = db;\n\t\t}\n\t\treturn result;\n\t}\n\n}\n","import { Config, SignalType, Signal, Signals } from './Types';\n\nexport class SignalFactory {\n\n\tconstructor(private readonly config: Pick<Config, \"size\" | \"rate\">) {\n\t}\n\n\tgenerate_all(): Signals {\n\t\treturn {\n\t\t\tnoise: this.generate_noise(),\n\t\t\tpure: this.generate_sine(this.config.rate / 4),\n\t\t}\n\t}\n\n\tgenerate_noise(): Signal {\n\t\tconst { size } = this.config;\n\t\tconst signal = new Float32Array(size);\n\t\tfor (let i = 0; i < size; ++i) {\n\t\t\tsignal[i] += (2 * Math.random() - 1) * Math.sqrt(size) * 2;\n\t\t}\n\t\treturn signal;\n\t}\n\n\tgenerate_sine(f: number): Signal {\n\t\tconst { size, rate } = this.config;\n\t\tconst signal = new Float32Array(size);\n\t\tfor (let i = 0; i < size; ++i) {\n\t\t\tsignal[i] = Math.sin(2 * Math.PI * f * i / rate)\n\t\t}\n\t\treturn signal;\n\t}\n\n};\n","import { Config, Model, Controller, View } from './Types';\nimport { Mapping } from './Mapping';\n\nconst _ = require('lodash');\nconst d3 = require('d3');\n\nexport class SpectrumView implements View {\n\n\tprivate viewer_onclick(controller: Controller, e: MouseEvent) {\n\t\tconst viewer = d3.select(\".viewer\").node() as HTMLCanvasElement;\n\t\tconst { rate, size } = this.config;\n\t\tconst mapping = new Mapping(this.config, viewer);\n\t\tconst [x, y] = mapping.unproject(e.clientX * devicePixelRatio, e.clientY * devicePixelRatio);\n\t\tconst f = mapping.unproject_f(x);\n\t\tconst db = mapping.unproject_db(y);\n\t\tcontroller.set_cursor(f, db);\n\t}\n\n\tprivate readonly node: HTMLCanvasElement;\n\tprivate readonly context: CanvasRenderingContext2D;\n\n\tconstructor(\n\t\tprivate readonly config: Readonly<Config>,\n\t\tprivate readonly model: Model\n\t) {\n\t\tconst viewer = d3.select(\".viewer\");\n\t\tthis.node = viewer.node() as HTMLCanvasElement;\n\t\tthis.context = this.node.getContext('2d') as CanvasRenderingContext2D;\n\t}\n\n\tprivate on_resize() {\n\t\tconst width = this.node.clientWidth;\n\t\tconst height = this.node.clientHeight;\n\t\tconst ratio = window.devicePixelRatio;\n\t\tthis.node.width = Math.round(width * ratio);\n\t\tthis.node.height = Math.round(height * ratio);\n\t\tthis.update();\n\t}\n\n\tbind(controller: Controller) {\n\t\tconst observer = new ResizeObserver(_.debounce(() => this.on_resize(), 40, { leading: true, trailing: true }));\n\t\tobserver.observe(this.node);\n\t\tthis.node.addEventListener('click', (e) => this.viewer_onclick(controller, e));\n\t}\n\n\tupdate() {\n\t\tconst config = this.config;\n\t\tconst model = this.model;\n\t\tconst node = this.node;\n\t\tconst ctx = this.context;\n\t\tconst width = node.width;\n\t\tconst height = node.height;\n\t\tctx.clearRect(0, 0, width, height);\n\t\tconst mapping = new Mapping(config, node);\n\t\tconst { db_min, db_max } = mapping;\n\t\tctx.globalCompositeOperation = \"lighter\";\n\t\t{\n\t\t\t/* Spectrum */\n\t\t\tctx.lineWidth = 2;\n\t\t\tctx.strokeStyle = \"red\";\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(...mapping.project(mapping.project_f(mapping.fmin), mapping.project_db(0)));\n\t\t\tconst spectrum = model.spectrum;\n\t\t\tfor (let i = 0; i < spectrum.length; i += 2) {\n\t\t\t\tconst f = spectrum[i];\n\t\t\t\tconst db = spectrum[i + 1];\n\t\t\t\tif (f >= mapping.fmin && f <= mapping.fmax) {\n\t\t\t\t\tctx.lineTo(...mapping.project(mapping.project_f(f), mapping.project_db(db)));\n\t\t\t\t}\n\t\t\t}\n\t\t\tctx.stroke();\n\t\t}\n\t\t{\n\t\t\t/* EQ profile */\n\t\t\tctx.strokeStyle = \"orange\";\n\t\t\tctx.lineWidth = 4;\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(...mapping.project(mapping.project_f(mapping.fmin), mapping.project_db(0)));\n\t\t\tfor (const { f, g } of model.eq) {\n\t\t\t\tctx.lineTo(...mapping.project(mapping.project_f(f), mapping.project_db(g)));\n\t\t\t}\n\t\t\tctx.lineTo(...mapping.project(mapping.project_f(mapping.fmax), mapping.project_db(0)));\n\t\t\tctx.stroke();\n\t\t\t/* Points */\n\t\t\tctx.lineWidth = 6;\n\t\t\tfor (const { f, g } of model.eq) {\n\t\t\t\tconst [x, y] = mapping.project(mapping.project_f(f), mapping.project_db(g));\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.rect(x - 1 / width, y - 1 / height, 2 / width, 2 / height);\n\t\t\t\tctx.stroke();\n\t\t\t}\n\t\t}\n\t\t{\n\t\t\t/* Frequency gridlines */\n\t\t\tfor (let f = mapping.fmin; f < mapping.fmax; f *= 10) {\n\t\t\t\tfor (let d = 1; d < 10 && f * d < mapping.fmax; d++) {\n\t\t\t\t\tctx.lineWidth = d == 1 ? 4 : 2;\n\t\t\t\t\tctx.strokeStyle = d == 1 ? \"blue\" : \"green\";\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.moveTo(...mapping.project(mapping.project_f(f * d), 0));\n\t\t\t\t\tctx.lineTo(...mapping.project(mapping.project_f(f * d), 1));\n\t\t\t\t\tctx.stroke();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t{\n\t\t\t/* Level gridlines */\n\t\t\tfor (let g = Math.ceil(db_min / 6) * 6; g <= db_max; g += 6) {\n\t\t\t\tctx.lineWidth = g == 0 ? 4 : 2;\n\t\t\t\tctx.strokeStyle = g == 0 ? \"blue\" : \"green\";\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(...mapping.project(0, mapping.project_db(g)));\n\t\t\t\tctx.lineTo(...mapping.project(1, mapping.project_db(g)));\n\t\t\t\tctx.stroke();\n\t\t\t}\n\t\t}\n\t\t{\n\t\t\t/* Bounds */\n\t\t\tctx.lineWidth = 4;\n\t\t\tctx.strokeStyle = \"silver\";\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(...mapping.project(0, 0));\n\t\t\tctx.lineTo(...mapping.project(1, 0));\n\t\t\tctx.lineTo(...mapping.project(1, 1));\n\t\t\tctx.lineTo(...mapping.project(0, 1));\n\t\t\tctx.lineTo(...mapping.project(0, 0));\n\t\t\tctx.stroke();\n\t\t}\n\t}\n\n}\n","export const eq_freq: ReadonlyArray<number> = [\n\t25, 31.5, 40, 50, 63, 80, 100, 125, 160, 200,\n\t250, 315, 400, 500, 630, 800, 1000, 1250, 1600, 2000,\n\t2500, 3150, 4000, 5000, 6300, 8000, 10000, 12500, 16000, 20000\n];\n","import { Config, AnalysisStrategyName, AnalysisStrategy } from './Types';\nimport { DefaultModel } from './DefaultModel';\nimport { ControlsView } from './ControlsView';\nimport { SpectrumView } from './SpectrumView';\nimport { CursorView } from './CursorView';\nimport { MainController } from './MainController';\nimport { FourierStrategy } from './FourierStrategy';\nimport { SerialStrategy } from './SerialStrategy';\n\nfunction start() {\n\tconst strategy_name = (window.location.hash.replace(/^#/, '') as AnalysisStrategyName) || 'fourier';\n\n\tconst config: Config = {\n\t\t'fourier': { rate: 65536, size: 32768 },\n\t\t'sines': { rate: 60000, size: 20000 },\n\t}[strategy_name];\n\n\tconst strategy: AnalysisStrategy = {\n\t\t'fourier': () => new FourierStrategy(config),\n\t\t'sines': () => new SerialStrategy(config)\n\t}[strategy_name]();\n\n\tconst model = new DefaultModel(strategy);\n\n\tconst controls_view = new ControlsView(model);\n\tconst cursor_view = new CursorView(model);\n\tconst spectrum_view = new SpectrumView(config, model);\n\tconst views = [controls_view, cursor_view, spectrum_view];\n\n\tconst controller = new MainController(config, model, views);\n}\n\nstart();\n"],"names":["Biquad","constructor","a1","a2","b0","b1","b2","xz1","xz2","yz1","yz2","static","freq","gain","q","rate","A","Math","pow","w","PI","sn","sin","cs","cos","a","a0","reset","this","apply","signal","N","length","Float32Array","i","x","y","d3","model","bind","controller","select","selectAll","data","enter","append","attr","text","on","e","set_q","currentTarget","value","bars","eq_freq","map","set_gain","update","round","log10","toFixed","controls","eq","g","node","cursor_f","cursor_db","value_db","cursor","strategy","f","spectrum","interpolate_db","f0","f1","lerp","db0","update_cursor","update_eq","calculate","band","set_cursor","config","bands","filters","create_bandpass","filter","fft","size","SignalFactory","generate_noise","baseline","get_spectrum","mapping","Mapping","transform","realTransform","result","level","hypot","sqrt","i_to_f","Equaliser","level_to_db","views","view","index","padding","nonpadding","canvas","db_min","db_max","fmin","fmax","min","width","height","project","max","f_to_i","project_x","xmin","xmax","lx","log","lmin","project_f","project_db","db","unproject","u","v","unproject_f","lmax","exp","unproject_i","unproject_db","floor","pts","ceil","sines","Array","fill","_","lm","generate_sine","out_it","reduce","b","abs","generate_all","noise","pure","random","viewer","context","getContext","viewer_onclick","clientX","devicePixelRatio","clientY","on_resize","clientWidth","clientHeight","ratio","window","ResizeObserver","debounce","leading","trailing","observe","addEventListener","ctx","clearRect","globalCompositeOperation","lineWidth","strokeStyle","beginPath","moveTo","lineTo","stroke","rect","d","strategy_name","location","hash","replace","FourierStrategy","SerialStrategy","DefaultModel","ControlsView","CursorView","SpectrumView","MainController","start"],"sourceRoot":""}