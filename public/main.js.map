{"version":3,"file":"main.js","mappings":"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","sources":["webpack://js/./src/frequencies.ts","webpack://js/./src/DefaultModel.ts","webpack://js/./src/ControlsView.ts","webpack://js/./src/Mapping.ts","webpack://js/./src/SpectrumView.ts","webpack://js/./src/CursorView.ts","webpack://js/./src/MainController.ts","webpack://js/./src/SignalFactory.ts","webpack://js/./src/Biquad.ts","webpack://js/./src/Equaliser.ts","webpack://js/./src/FourierStrategy.ts","webpack://js/./src/SerialStrategy.ts","webpack://js/./src/main.ts"],"sourcesContent":["export const eq_freq: ReadonlyArray<number> = [\n\t25, 31.5, 40, 50, 63, 80, 100, 125, 160, 200,\n\t250, 315, 400, 500, 630, 800, 1000, 1250, 1600, 2000,\n\t2500, 3150, 4000, 5000, 6300, 8000, 10000, 12500, 16000, 20000\n];\n","import { Model, SignalType, EqBand, Cursor, AnalysisStrategy } from './Types';\nimport { eq_freq } from './frequencies';\n\nconst INITIAL_G = 0;\nconst INITIAL_Q = 1;\n\nexport class DefaultModel implements Model {\n\tpublic q: number = INITIAL_Q;\n\tpublic eq: Array<EqBand> = eq_freq.map((f, i) => ({ i, f, g: INITIAL_G, q: INITIAL_Q }));\n\tpublic cursor: Cursor = { cursor_f: 0, cursor_db: 0, value_db: null };\n\t/* (freq, db)... */\n\tpublic spectrum: Float32Array = new Float32Array(0);\n\n\tprivate interpolate_db(f: number): number | null {\n\t\tconst spectrum = this.spectrum;\n\t\tfor (let i = 0; i < spectrum.length - 2; i += 2) {\n\t\t\tconst f0 = spectrum[i];\n\t\t\tconst f1 = spectrum[i + 2];\n\t\t\tif (f >= f0 && f <= f1 && f1 > f0) {\n\t\t\t\tconst lerp = (f - f0) / (f1 - f0);\n\t\t\t\tconst db0 = spectrum[i + 1];\n\t\t\t\tconst db1 = spectrum[i + 3];\n\t\t\t\treturn db0 + lerp * (db1 - db0);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate update_cursor() {\n\t\tthis.cursor.value_db = this.interpolate_db(this.cursor.cursor_f);\n\t}\n\n\tprivate async update_eq() {\n\t\tthis.spectrum = await this.strategy.calculate(this.eq);\n\t\tthis.update_cursor();\n\t}\n\n\tprivate readonly init: Promise<void>;\n\n\tconstructor(\n\t\tprivate readonly strategy: AnalysisStrategy\n\t) {\n\t\tthis.init = this.update_eq();\n\t}\n\n\tasync set_q(value: number) {\n\t\tawait this.init;\n\t\tthis.q = value\n\t\tfor (const band of this.eq) {\n\t\t\tband.q = value;\n\t\t}\n\t\tawait this.update_eq();\n\t}\n\n\tasync set_gain(band: number, value: number) {\n\t\tawait this.init;\n\t\tthis.eq[band].g = value;\n\t\tawait this.update_eq();\n\t}\n\n\tasync set_cursor(cursor_f: number, cursor_db: number) {\n\t\tawait this.init;\n\t\tthis.cursor = { cursor_f, cursor_db, value_db: null };\n\t\tthis.update_cursor();\n\t}\n\n}\n","import { Model, Controller, View } from './Types';\nimport { eq_freq } from './frequencies';\n\nconst _ = require('lodash');\nconst d3 = require('d3');\n\nfunction debounce(fn) {\n\treturn _.debounce(fn, 60, { leading: true, trailing: true });\n}\n\nexport class ControlsView implements View {\n\n\tconstructor(\n\t\tprivate readonly model: Model\n\t) {\n\t}\n\n\tprivate set_q(controller: Controller, value: number) {\n\t\tcontroller.set_q(Math.pow(10, value / 10));\n\t}\n\n\tprivate set_gain(controller: Controller, index: number, value: number) {\n\t\tcontroller.set_gain(index, value);\n\t}\n\n\tprivate readonly debounced_set_q = debounce(this.set_q);\n\tprivate readonly debounced_set_gain = debounce(this.set_gain);\n\n\tbind(controller: Controller) {\n\t\t/* Bandwidth */\n\t\tconst q = d3.select(\"aside\")\n\t\t\t.selectAll(\"label.control.q\")\n\t\t\t.data([1])\n\t\t\t.enter()\n\t\t\t\t.append(\"label\")\n\t\t\t\t.attr(\"class\", \"control q\")\n\t\t\t\t;\n\t\tq.append(\"span\")\n\t\t\t.attr(\"class\", \"control-name q\")\n\t\t\t.text(\"q\")\n\t\t\t;\n\t\tq.append(\"input\")\n\t\t\t.attr(\"class\", \"slider q\")\n\t\t\t.attr(\"type\", \"range\")\n\t\t\t.attr(\"min\", \"-10\")\n\t\t\t.attr(\"max\", \"10\")\n\t\t\t.attr(\"value\", 0)\n\t\t\t.on(\"input\", (e) => this.debounced_set_q(controller, e.currentTarget.value));\n\t\t\t;\n\t\tq.append(\"span\")\n\t\t\t.attr(\"class\", \"control-value q\")\n\t\t\t.text(\"\")\n\t\t\t;\n\t\t/* Gain */\n\t\tconst bars = d3.select(\"aside\")\n\t\t\t.selectAll(\"label.control.eq.g\")\n\t\t\t.data(eq_freq.map((x, i) => ({ x, i })))\n\t\t\t.enter()\n\t\t\t\t.append(\"label\")\n\t\t\t\t.attr(\"class\", \"control eq g\")\n\t\t\t\t;\n\t\tbars.append(\"span\")\n\t\t\t.attr(\"class\", \"control-name eq\")\n\t\t\t.text(({ x }) => x < 1000 ? `${x}` : `${x / 1000}k`)\n\t\t\t;\n\t\tbars.append(\"input\")\n\t\t\t.attr(\"class\", \"slider eq\")\n\t\t\t.attr(\"type\", \"range\")\n\t\t\t.attr(\"min\", \"-32\")\n\t\t\t.attr(\"max\", \"32\")\n\t\t\t.attr(\"value\", 0)\n\t\t\t.on(\"input\", (e, { i }) => this.debounced_set_gain(controller, i, e.currentTarget.value))\n\t\t\t;\n\t\tbars.append(\"span\")\n\t\t\t.attr(\"class\", \"control-value eq\")\n\t\t\t.text(\"\")\n\t\t\t;\n\t}\n\n\tupdate() {\n\t\tconst model = this.model;\n\t\t/* Bandwidth */\n\t\tconst q = d3.select(\"aside\")\n\t\t\t.selectAll(\"label.control.q\")\n\t\t\t.data([model.q])\n\t\t\t;\n\t\tq.select(\".slider.q\")\n\t\t\t.attr(\"value\", x => Math.round(Math.log10(model.q) * 10))\n\t\t\t;\n\t\tq.select(\".control-value.q\")\n\t\t\t.text(x => x.toFixed(1))\n\t\t\t;\n\t\t/* Gain */\n\t\tconst controls = d3.select(\"aside\")\n\t\t\t.selectAll(\"label.control.eq\")\n\t\t\t.data(model.eq)\n\t\t\t;\n\t\tcontrols\n\t\t\t.select(\".slider.eq\")\n\t\t\t.attr(\"value\", x => x.g)\n\t\t\t;\n\t\tcontrols\n\t\t\t.select(\".control-value.eq\")\n\t\t\t.text(x => `${x.g}dB`)\n\t\t\t;\n\t}\n\n}\n","import { Config } from './Types';\n\nconst padding = 0.01;\nconst nonpadding = 1 - (2 * padding);\n\nexport class Mapping {\n\n\tpublic readonly fmin: number;\n\tpublic readonly fmax: number;\n\n\tpublic readonly width: number;\n\tpublic readonly height: number;\n\n\tconstructor(\n\t\tprivate readonly config: Config,\n\t\tcanvas: HTMLCanvasElement | null = null,\n\t\tpublic readonly db_min: number = -60,\n\t\tpublic readonly db_max: number = +60,\n\t) {\n\t\tthis.fmin = 10;\n\t\tthis.fmax = Math.min(20000, config.rate / 2);\n\t\tthis.width = canvas?.width ?? 0;\n\t\tthis.height = canvas?.height ?? 0;\n\t}\n\n\tproject(x: number, y: number): [number, number] {\n\t\tconst { width, height } = this;\n\t\treturn [\n\t\t\t(x * nonpadding + padding) * width,\n\t\t\t(y * nonpadding + padding) * height\n\t\t];\n\t}\n\n\tlevel_to_db(level: number): number {\n\t\tconst { db_min, db_max } = this;\n\t\treturn Math.min(db_max, Math.max(db_min, 20 * Math.log10(level)));\n\t}\n\n\ti_to_f(i: number): number {\n\t\tconst { rate, size } = this.config;\n\t\treturn i * rate / size;\n\t}\n\n\tf_to_i(f: number): number {\n\t\tconst { size, rate } = this.config;\n\t\treturn Math.min(size / 2 - 1, Math.max(0, Math.round(f * size / rate)));\n\t}\n\n\tproject_x(x: number, xmin: number, xmax: number): number {\n\t\tconst lx = Math.log(x);\n\t\tconst lmin = Math.log(xmin);\n\t\tconst lmax = Math.log(xmax);\n\t\treturn (lx - lmin) / (lmax - lmin);\n\t}\n\n\tproject_f(f: number): number {\n\t\treturn this.project_x(f, this.fmin, this.fmax);\n\t}\n\n\tproject_db(db: number): number {\n\t\tconst { db_min, db_max } = this;\n\t\treturn (db_max - db) / (db_max - db_min);\n\t}\n\n\tunproject(u: number, v: number): [number, number] {\n\t\tconst { width, height } = this;\n\t\treturn [\n\t\t\t(u / width - padding) / nonpadding,\n\t\t\t(v / height - padding) / nonpadding,\n\t\t];\n\t}\n\n\tunproject_f(u: number): number {\n\t\tconst { fmin, fmax } = this;\n\t\tconst lmin = Math.log(fmin);\n\t\tconst lmax = Math.log(fmax);\n\t\treturn Math.exp(u * (lmax - lmin) + lmin);\n\t}\n\n\tunproject_i(u: number): number {\n\t\tconst { size, rate } = this.config;\n\t\tconst f = this.unproject_f(u);\n\t\treturn this.f_to_i(Math.round(f * size / rate));\n\t}\n\n\tunproject_db(v: number): number {\n\t\tconst { db_min, db_max } = this;\n\t\treturn db_max - (v * (db_max - db_min));\n\t}\n\n}\n","import { Config, Model, Controller, View } from './Types';\nimport { Mapping } from './Mapping';\n\nconst _ = require('lodash');\nconst d3 = require('d3');\n\nexport class SpectrumView implements View {\n\n\tprivate readonly node: HTMLCanvasElement;\n\tprivate readonly context: CanvasRenderingContext2D;\n\n\tconstructor(\n\t\tprivate readonly config: Readonly<Config>,\n\t\tprivate readonly model: Model\n\t) {\n\t\tconst viewer = d3.select(\".viewer\");\n\t\tthis.node = viewer.node() as HTMLCanvasElement;\n\t\tthis.context = this.node.getContext('2d') as CanvasRenderingContext2D;\n\t}\n\n\tprivate onresize() {\n\t\tconst width = this.node.clientWidth;\n\t\tconst height = this.node.clientHeight;\n\t\tconst ratio = window.devicePixelRatio;\n\t\tthis.node.width = Math.round(width * ratio);\n\t\tthis.node.height = Math.round(height * ratio);\n\t\tthis.update();\n\t}\n\n\tprivate onmovecursor(controller: Controller, clientX: number, clientY: number) {\n\t\tconst viewer = d3.select(\".viewer\").node() as HTMLCanvasElement;\n\t\tconst { rate, size } = this.config;\n\t\tconst mapping = new Mapping(this.config, viewer);\n\t\tconst [x, y] = mapping.unproject(clientX * devicePixelRatio, clientY * devicePixelRatio);\n\t\tconst f = mapping.unproject_f(x);\n\t\tconst db = mapping.unproject_db(y);\n\t\tcontroller.set_cursor(f, db);\n\t}\n\n\tprivate onmousemove(controller: Controller, e: MouseEvent) {\n\t\tif (e.buttons & 1) {\n\t\t\tthis.onmovecursor(controller, e.clientX, e.clientY);\n\t\t}\n\t}\n\n\tprivate ontouchmove(controller: Controller, e: TouchEvent) {\n\t\tconst touch = e.touches.item(0);\n\t\tif (touch === null) {\n\t\t\treturn;\n\t\t}\n\t\tthis.onmovecursor(controller, touch.clientX, touch.clientY);\n\t}\n\n\tbind(controller: Controller) {\n\t\tconst observer = new ResizeObserver(_.debounce(() => this.onresize(), 40, { leading: true, trailing: true }));\n\t\tobserver.observe(this.node);\n\t\tthis.node.addEventListener('mousedown', (e) => this.onmousemove(controller, e));\n\t\tthis.node.addEventListener('mousemove', (e) => this.onmousemove(controller, e));\n\t\tthis.node.addEventListener('touchstart', (e) => this.ontouchmove(controller, e));\n\t\tthis.node.addEventListener('touchmove', (e) => this.ontouchmove(controller, e));\n\t}\n\n\tupdate() {\n\t\tconst config = this.config;\n\t\tconst model = this.model;\n\t\tconst node = this.node;\n\t\tconst ctx = this.context;\n\t\tconst width = node.width;\n\t\tconst height = node.height;\n\t\tctx.clearRect(0, 0, width, height);\n\t\tconst mapping = new Mapping(config, node);\n\t\tconst { db_min, db_max } = mapping;\n\t\tctx.globalCompositeOperation = \"lighter\";\n\t\t{\n\t\t\t/* Spectrum */\n\t\t\tctx.lineWidth = 2;\n\t\t\tctx.strokeStyle = \"red\";\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(...mapping.project(mapping.project_f(mapping.fmin), mapping.project_db(0)));\n\t\t\tconst spectrum = model.spectrum;\n\t\t\tfor (let i = 0; i < spectrum.length; i += 2) {\n\t\t\t\tconst f = spectrum[i];\n\t\t\t\tconst db = spectrum[i + 1];\n\t\t\t\tif (f >= mapping.fmin && f <= mapping.fmax) {\n\t\t\t\t\tctx.lineTo(...mapping.project(mapping.project_f(f), mapping.project_db(db)));\n\t\t\t\t}\n\t\t\t}\n\t\t\tctx.stroke();\n\t\t}\n\t\t{\n\t\t\t/* EQ profile */\n\t\t\tctx.strokeStyle = \"orange\";\n\t\t\tctx.lineWidth = 4;\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(...mapping.project(mapping.project_f(mapping.fmin), mapping.project_db(0)));\n\t\t\tfor (const { f, g } of model.eq) {\n\t\t\t\tctx.lineTo(...mapping.project(mapping.project_f(f), mapping.project_db(g)));\n\t\t\t}\n\t\t\tctx.lineTo(...mapping.project(mapping.project_f(mapping.fmax), mapping.project_db(0)));\n\t\t\tctx.stroke();\n\t\t\t/* Points */\n\t\t\tctx.lineWidth = 6;\n\t\t\tfor (const { f, g } of model.eq) {\n\t\t\t\tconst [x, y] = mapping.project(mapping.project_f(f), mapping.project_db(g));\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.rect(x - 1 / width, y - 1 / height, 2 / width, 2 / height);\n\t\t\t\tctx.stroke();\n\t\t\t}\n\t\t}\n\t\t{\n\t\t\t/* Frequency gridlines */\n\t\t\tfor (let f = mapping.fmin; f < mapping.fmax; f *= 10) {\n\t\t\t\tfor (let d = 1; d < 10 && f * d < mapping.fmax; d++) {\n\t\t\t\t\tctx.lineWidth = d == 1 ? 4 : 2;\n\t\t\t\t\tctx.strokeStyle = d == 1 ? \"blue\" : \"green\";\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.moveTo(...mapping.project(mapping.project_f(f * d), 0));\n\t\t\t\t\tctx.lineTo(...mapping.project(mapping.project_f(f * d), 1));\n\t\t\t\t\tctx.stroke();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t{\n\t\t\t/* Level gridlines */\n\t\t\tfor (let g = Math.ceil(db_min / 6) * 6; g <= db_max; g += 6) {\n\t\t\t\tctx.lineWidth = g == 0 ? 4 : 2;\n\t\t\t\tctx.strokeStyle = g == 0 ? \"blue\" : \"green\";\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(...mapping.project(0, mapping.project_db(g)));\n\t\t\t\tctx.lineTo(...mapping.project(1, mapping.project_db(g)));\n\t\t\t\tctx.stroke();\n\t\t\t}\n\t\t}\n\t\t{\n\t\t\t/* Bounds */\n\t\t\tctx.lineWidth = 4;\n\t\t\tctx.strokeStyle = \"silver\";\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(...mapping.project(0, 0));\n\t\t\tctx.lineTo(...mapping.project(1, 0));\n\t\t\tctx.lineTo(...mapping.project(1, 1));\n\t\t\tctx.lineTo(...mapping.project(0, 1));\n\t\t\tctx.lineTo(...mapping.project(0, 0));\n\t\t\tctx.stroke();\n\t\t}\n\t\t{\n\t\t\t/* Cursor */\n\t\t\tconst cursor = model.cursor;\n\t\t\tctx.lineWidth = 8;\n\t\t\tctx.strokeStyle = \"cyan\";\n\t\t\tconst f = cursor.cursor_f;\n\t\t\tconst db = cursor.cursor_db;\n\t\t\tconst vdb = cursor.value_db;\n\t\t\tconst [cx, cy] = mapping.project(mapping.project_f(f), mapping.project_db(db));\n\t\t\t{\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.rect(cx - 1 / width, cy - 1 / height, 2 / width, 2 / height);\n\t\t\t\tctx.stroke();\n\t\t\t}\n\t\t\tif (vdb !== null) {\n\t\t\t\tctx.setLineDash([4, 4]);\n\t\t\t\tconst [vx, vy] = mapping.project(mapping.project_f(f), mapping.project_db(vdb));\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.rect(vx - 1 / width, vy - 1 / height, 2 / width, 2 / height);\n\t\t\t\tctx.stroke();\n\t\t\t\tctx.lineWidth = 2;\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(cx, cy);\n\t\t\t\tctx.lineTo(vx, vy);\n\t\t\t\tctx.stroke();\n\t\t\t\tctx.setLineDash([]);\n\t\t\t}\n\t\t}\n\t}\n\n}\n","import { Model, Controller, View } from \"./Types\";\n\nconst d3 = require(\"d3\");\n\nexport class CursorView implements View {\n\n\tprivate readonly node: d3.Selection<HTMLElement, {}, HTMLElement, any>;\n\n\tconstructor(\n\t\tprivate readonly model: Model\n\t) {\n\t\tthis.node = d3.select(\".cursor\");\n\t}\n\n\tbind(controller: Controller) {\n\t\tthis.node\n\t\t\t.append(\"span\")\n\t\t\t.attr(\"class\", \"cursor-x\")\n\t\t\t;\n\t\tthis.node\n\t\t\t.append(\"span\")\n\t\t\t.attr(\"class\", \"cursor-y\")\n\t\t\t;\n\t\tthis.node\n\t\t\t.append(\"span\")\n\t\t\t.attr(\"class\", \"cursor-v\")\n\t\t\t;\n\t}\n\n\tupdate() {\n\t\tconst { cursor_f, cursor_db, value_db } = this.model.cursor;\n\t\tthis.node.select(\".cursor-x\")\n\t\t\t.text(`x: ${cursor_f.toFixed(0)} Hz`)\n\t\t\t;\n\t\tthis.node.select(\".cursor-y\")\n\t\t\t.text(`y: ${cursor_db.toFixed(2)} dB`)\n\t\t\t;\n\t\tthis.node.select(\".cursor-v\")\n\t\t\t.text(`value: ${value_db?.toFixed(2) ?? \"-\"} dB`)\n\t\t\t;\n\t}\n\n}\n","import { Signals, Cursor, Config, Model, Controller, View } from './Types';\n\nexport class MainController implements Controller {\n\n\tconstructor(\n\t\tprivate readonly config: Readonly<Config>,\n\t\tprivate readonly model: Model,\n\t\tprivate readonly views: ReadonlyArray<View>\n\t) {\n\t\tfor (const view of this.views) {\n\t\t\tview.bind(this);\n\t\t}\n\t\tthis.update();\n\t}\n\n\tprivate update() {\n\t\tfor (const view of this.views) {\n\t\t\tview.update();\n\t\t}\n\t}\n\n\tasync set_q(value: number) {\n\t\tawait this.model.set_q(value);\n\t\tthis.update();\n\t}\n\n\tasync set_gain(index: number, value: number) {\n\t\tawait this.model.set_gain(index, value);\n\t\tthis.update();\n\t}\n\n\tasync set_cursor(cursor_f: number, cursor_db: number) {\n\t\tawait this.model.set_cursor(cursor_f, cursor_db);\n\t\tthis.update();\n\t}\n\n}\n","import { Config, SignalType, Signal, Signals } from './Types';\n\nexport class SignalFactory {\n\n\tconstructor(private readonly config: Pick<Config, \"size\" | \"rate\">) {\n\t}\n\n\tgenerate_all(): Signals {\n\t\treturn {\n\t\t\tnoise: this.generate_noise(),\n\t\t\tpure: this.generate_sine(this.config.rate / 4),\n\t\t}\n\t}\n\n\tgenerate_noise(): Signal {\n\t\tconst { size } = this.config;\n\t\tconst signal = new Float32Array(size);\n\t\tfor (let i = 0; i < size; ++i) {\n\t\t\tsignal[i] += (2 * Math.random() - 1) * Math.sqrt(size) * 2;\n\t\t}\n\t\treturn signal;\n\t}\n\n\tgenerate_sine(f: number): Signal {\n\t\tconst { size, rate } = this.config;\n\t\tconst signal = new Float32Array(size);\n\t\tfor (let i = 0; i < size; ++i) {\n\t\t\tsignal[i] = Math.sin(2 * Math.PI * f * i / rate)\n\t\t}\n\t\treturn signal;\n\t}\n\n};\n","export class Biquad {\n\n\tprivate xz1: number = 0;\n\tprivate xz2: number = 0;\n\n\tprivate yz1: number = 0;\n\tprivate yz2: number = 0;\n\n\tconstructor (\n\t\tpublic readonly a1: number = 0,\n\t\tpublic readonly a2: number = 0,\n\t\tpublic readonly b0: number = 0,\n\t\tpublic readonly b1: number = 0,\n\t\tpublic readonly b2: number = 0\n\t) {\n\t}\n\n\tpublic static create_bandpass(freq: number, gain: number, q: number, rate: number): Biquad {\n\t\tconst A = Math.pow(10, gain / 40);\n\t\tconst w = 2 * Math.PI * freq / rate;\n\t\tconst sn = Math.sin(w);\n\t\tconst cs = Math.cos(w);\n\t\tconst a = sn / (2 * q);\n\t\tconst a0 = 1 + a / A;\n\t\tconst a1 = -2 * cs;\n\t\tconst a2 = 1 - a / A;\n\t\tconst b0 = 1 + a * A;\n\t\tconst b1 = -2 * cs;\n\t\tconst b2 = 1 - a * A;\n\t\treturn new Biquad(a1 / a0, a2 / a0, b0 / a0, b1 / a0, b2 / a0);\n\t}\n\n\tpublic reset() {\n\t\tthis.xz1 = 0;\n\t\tthis.xz2 = 0;\n\t\tthis.yz1 = 0;\n\t\tthis.yz2 = 0;\n\t}\n\n\tpublic apply(signal: Float32Array) {\n\t\tconst a1 = this.a1;\n\t\tconst a2 = this.a2;\n\t\tconst b0 = this.b0;\n\t\tconst b1 = this.b1;\n\t\tconst b2 = this.b2;\n\t\tlet xz1 = this.xz1;\n\t\tlet xz2 = this.xz1;\n\t\tlet yz1 = this.yz1;\n\t\tlet yz2 = this.yz2;\n\t\tconst N = signal.length;\n\t\tconst ys = new Float32Array(N);\n\t\tfor (let i = 0; i < N; ++i) {\n\t\t\tconst x = signal[i];\n\t\t\tconst y = x * b0 + xz1 * b1 + xz2 * b2 - yz1 * a1 - yz2 * a2\n\t\t\tsignal[i] = y;\n\t\t\txz2 = xz1;\n\t\t\txz1 = x;\n\t\t\tyz2 = yz1;\n\t\t\tyz1 = y;\n\t\t}\n\t\tthis.xz1 = xz1;\n\t\tthis.xz2 = xz1;\n\t\tthis.yz1 = yz1;\n\t\tthis.yz2 = yz2;\n\t}\n\n}\n","import { Config, EqBand } from './Types';\nimport { Biquad } from './Biquad';\n\nexport class Equaliser {\n\n\tprivate readonly filters: Array<Biquad>;\n\n\tconstructor(config: Pick<Config, \"rate\">, bands: ReadonlyArray<EqBand>) {\n\t\tconst { rate } = config;\n\t\tthis.filters = bands.map(({ f, g, q }) => Biquad.create_bandpass(f, g, q, rate));\n\t}\n\n\tapply(signal: Float32Array) {\n\t\tfor (const filter of this.filters) {\n\t\t\tfilter.apply(signal);\n\t\t}\n\t}\n\n}\n","import { AnalysisStrategy, Config, Model, SignalType, EqBand, Signal } from './Types';\nimport { Mapping } from './Mapping';\nimport { SignalFactory } from './SignalFactory';\nimport { Equaliser } from './Equaliser';\n\nimport FFT from 'fft.js';\n\nexport class FourierStrategy implements AnalysisStrategy {\n\n\tprivate readonly fft: typeof FFT;\n\tprivate readonly signal: Signal;\n\tprivate readonly baseline: Readonly<Float32Array>;\n\n\tprivate get_spectrum(signal: Readonly<Float32Array>): Float32Array {\n\t\tconst mapping = new Mapping(this.config);\n\t\tconst { size } = this.config;\n\t\tconst transform = new Float32Array(size * 2);\n\t\t(this.fft as any).realTransform(transform, [...signal]);\n\t\tconst result = new Float32Array(size);\n\t\tfor (let i = 0; i < size; i += 2) {\n\t\t\tconst level = Math.hypot(transform[i], transform[i + 1]) / Math.sqrt(signal.length) / 128;\n\t\t\tresult[i] = mapping.i_to_f(i / 2);\n\t\t\tresult[i + 1] = level;\n\t\t}\n\t\treturn result;\n\t}\n\n\tconstructor(\n\t\tprivate readonly config: Config,\n\t) {\n\t\tthis.fft = new (FFT as any)(config.size);\n\t\tthis.signal = new SignalFactory(config).generate_noise();\n\t\tthis.baseline = this.get_spectrum(this.signal);\n\t}\n\n\tasync calculate(bands: ReadonlyArray<EqBand>): Promise<Float32Array> {\n\t\tconst mapping = new Mapping(this.config);\n\t\tconst { size } = this.config;\n\t\tconst signal = new Float32Array(this.signal);\n\t\tconst eq = new Equaliser(this.config, bands);\n\t\teq.apply(signal);\n\t\tconst spectrum = this.get_spectrum(signal);\n\t\tfor (let i = 1; i < spectrum.length; i += 2) {\n\t\t\tspectrum[i] = mapping.level_to_db(spectrum[i] / this.baseline[i]);\n\t\t}\n\t\treturn spectrum;\n\t}\n\n}\n","import { AnalysisStrategy, Config, Model, Signals, EqBand } from './Types';\nimport { Mapping } from './Mapping';\nimport { Equaliser } from './Equaliser';\nimport { SignalFactory } from './SignalFactory';\nimport { SerialRequest, SerialInitRequest, SerialJobRequest, SerialResponse, SerialJobResponse } from './SerialTypes';\n\ntype JobSerial = number;\n\nexport class SerialStrategy implements AnalysisStrategy {\n\n\tprivate readonly workers: Array<Worker> = [];\n\tprivate job_serial: JobSerial = 0;\n\tprivate callbacks: Map<JobSerial, (result: SerialJobResponse) => void> = new Map();\n\n\tprivate submit_job(worker: Worker, bands: ReadonlyArray<EqBand>): Promise<SerialJobResponse> {\n\t\tconst id = this.job_serial++;\n\t\tconst result = new Promise<SerialJobResponse>((resolve, reject) => {\n\t\t\tthis.callbacks.set(id, resolve);\n\t\t\tworker.postMessage(<SerialJobRequest> { type: 'job', id, bands });\n\t\t});\n\t\treturn result;\n\t}\n\n\tconstructor(\n\t\tprivate readonly config: Config,\n\t) {\n\t\tconst { rate } = this.config;\n\t\tconst mapping = new Mapping(this.config);\n\t\tconst lmin = Math.log10(mapping.fmin);\n\t\tconst lmax = Math.log10(mapping.fmax);\n\t\tconst res = 18;\n\t\tconst pts = res * (lmax - lmin);\n\t\tfor (let i = 0; i <= pts; ++i) {\n\t\t\tconst lm = i / res + lmin;\n\t\t\tconst freq = Math.pow(10, lm);\n\t\t\tconst worker = new Worker(new URL('./SerialWorker', import.meta.url));\n\t\t\tworker.onmessage = ({ data }: MessageEvent<SerialResponse>) => {\n\t\t\t\tconst id = data.id;\n\t\t\t\tconst callback = this.callbacks.get(id)!;\n\t\t\t\tthis.callbacks.delete(id);\n\t\t\t\tcallback(data);\n\t\t\t};\n\t\t\tworker.postMessage(<SerialInitRequest> { type: 'init', config, freq });\n\t\t\tthis.workers.push(worker);\n\t\t}\n\t}\n\n\tasync calculate(bands: ReadonlyArray<EqBand>): Promise<Float32Array> {\n\t\tconst worker_results = await Promise.all(this.workers.map(worker => this.submit_job(worker, bands)));\n\t\tconst mapping = new Mapping(this.config);\n\t\tconst result = new Float32Array(worker_results.length * 2);\n\t\tlet out_it = 0;\n\t\tfor (const { freq, db } of worker_results) {\n\t\t\tresult[out_it++] = freq;\n\t\t\tresult[out_it++] = db;\n\t\t}\n\t\treturn result;\n\t}\n\n}\n","import { Config, AnalysisStrategyName, AnalysisStrategy } from './Types';\nimport { DefaultModel } from './DefaultModel';\nimport { ControlsView } from './ControlsView';\nimport { SpectrumView } from './SpectrumView';\nimport { CursorView } from './CursorView';\nimport { MainController } from './MainController';\nimport { FourierStrategy } from './FourierStrategy';\nimport { SerialStrategy } from './SerialStrategy';\n\nfunction start() {\n\tconst strategy_name = (window.location.hash.replace(/^#/, '') as AnalysisStrategyName) || 'fourier';\n\n\tconst config: Config = {\n\t\t'fourier': { rate: 65536, size: 32768 },\n\t\t'sines': { rate: 60000, size: 20000 },\n\t}[strategy_name];\n\n\tconst strategy: AnalysisStrategy = {\n\t\t'fourier': () => new FourierStrategy(config),\n\t\t'sines': () => new SerialStrategy(config)\n\t}[strategy_name]();\n\n\tconst model = new DefaultModel(strategy);\n\n\tconst controls_view = new ControlsView(model);\n\tconst cursor_view = new CursorView(model);\n\tconst spectrum_view = new SpectrumView(config, model);\n\tconst views = [controls_view, cursor_view, spectrum_view];\n\n\tconst controller = new MainController(config, model, views);\n}\n\nstart();\n"],"names":["eq_freq","DefaultModel","constructor","strategy","q","eq","map","f","i","g","cursor","cursor_f","cursor_db","value_db","spectrum","Float32Array","this","init","update_eq","interpolate_db","length","f0","f1","lerp","db0","update_cursor","calculate","set_q","value","band","set_gain","set_cursor","_","d3","debounce","fn","leading","trailing","ControlsView","model","debounced_set_q","debounced_set_gain","controller","Math","pow","index","bind","select","selectAll","data","enter","append","attr","text","on","e","currentTarget","bars","x","update","round","log10","toFixed","controls","padding","nonpadding","Mapping","config","canvas","db_min","db_max","fmin","fmax","min","rate","width","height","project","y","level_to_db","level","max","i_to_f","size","f_to_i","project_x","xmin","xmax","lx","log","lmin","project_f","project_db","db","unproject","u","v","unproject_f","lmax","exp","unproject_i","unproject_db","SpectrumView","viewer","node","context","getContext","onresize","clientWidth","clientHeight","ratio","window","devicePixelRatio","onmovecursor","clientX","clientY","mapping","onmousemove","buttons","ontouchmove","touch","touches","item","ResizeObserver","observe","addEventListener","ctx","clearRect","globalCompositeOperation","lineWidth","strokeStyle","beginPath","moveTo","lineTo","stroke","rect","d","ceil","vdb","cx","cy","setLineDash","vx","vy","CursorView","MainController","views","view","SignalFactory","generate_all","noise","generate_noise","pure","generate_sine","signal","random","sqrt","sin","PI","Biquad","a1","a2","b0","b1","b2","xz1","xz2","yz1","yz2","static","freq","gain","A","w","sn","cs","cos","a","a0","reset","apply","N","Equaliser","bands","filters","create_bandpass","filter","FourierStrategy","fft","baseline","get_spectrum","transform","realTransform","result","hypot","SerialStrategy","workers","job_serial","callbacks","Map","pts","lm","worker","Worker","URL","onmessage","id","callback","get","delete","postMessage","type","push","submit_job","Promise","resolve","reject","set","worker_results","all","out_it","strategy_name","location","hash","replace","controls_view","cursor_view","spectrum_view","start"],"sourceRoot":""}